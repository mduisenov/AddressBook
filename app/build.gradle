buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.22.1'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'spoon'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.fernandocejas.frodo'

// Manifest version information!
def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.


def gitSha() {
    def p = 'git rev-parse --short HEAD'.execute([], project.rootDir)
    p.waitFor()
    if (p.exitValue() != 0) {
        throw new RuntimeException(p.errorStream.text)
    }

    return p.text.trim()
}

def gitTimestamp() {
    def p = 'git log -n 1 --format=%at'.execute([], rootDir)
    p.waitFor()
    if (p.exitValue() != 0) {
        throw new RuntimeException(p.errorStream.text)
    }

    return p.text.trim()
}

def isCi = "true".equals(System.getenv("CI"))
def preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))

configurations {
    internalDebugCompile
    internalReleaseCompile
    productionDebugCompile
    productionReleaseCompile
}


android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'

    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !isCi
    }

    signingConfigs {
        addressbook {
            storeFile file('../addressbook.jks')
            storePassword 'android'
            keyAlias 'android'
            keyPassword 'android'
        }
    }

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25

        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        signingConfig signingConfigs.addressbook

        buildConfigField 'String', 'GIT_SHA', "\"${gitSha()}\""
        buildConfigField 'long', 'GIT_TIMESTAMP', "${gitTimestamp()}L"

        testInstrumentationRunner "com.taxsee.addressbook.TestRunner"
    }

    buildTypes {
        debug {
//            applicationIdSuffix '.debug'
        }
        release {
        }
    }

    productFlavors {
        internal {
            applicationId 'com.taxsee.internal'
        }
        production {
            applicationId 'com.taxsee'
        }
    }

    lintOptions {
        textReport true
        abortOnError false
        textOutput 'stdout'
        fatal 'UnusedResources'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'LICENSE.txt'
    }
}

// TODO remove eventually: http://b.android.com/162285
configurations {
    internalDebugCompile
}

configurations.all {
    resolutionStrategy {
        force 'com.android.support:support-annotations:23.4.0'
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:25.2.0'
    compile 'com.android.support:support-v4:25.2.0'
    compile 'com.android.support:support-annotations:25.2.0'
    compile 'com.android.support:recyclerview-v7:25.2.0'
    compile 'com.android.support:design:25.2.0'

    compile 'com.github.TellH:RecyclerTreeView:1.2.0'

    apt "com.squareup.dagger:dagger-compiler:$depDagger"

    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.0.1'

    compile 'com.jakewharton:butterknife:8.2.1'
    apt 'com.jakewharton:butterknife-compiler:8.2.1'
    internalDebugCompile 'com.jakewharton.rxbinding:rxbinding:0.3.0'

    internalDebugCompile 'com.jakewharton.madge:madge:1.1.3'
    internalDebugCompile 'com.jakewharton.scalpel:scalpel:1.1.2'
    internalDebugCompile 'com.jakewharton:process-phoenix:1.0.2'

    internalCompile 'com.squareup.leakcanary:leakcanary-android:1.4-beta2'
    productionCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'

    compile 'io.reactivex:rxjava:1.1.0'
    compile "io.reactivex:rxandroid:$depRxAndroidVersion"
    compile 'com.tbruyelle.rxpermissions:rxpermissions:0.7.0@aar'

    internalCompile 'com.mattprecious.telescope:telescope:1.5.0@aar'

    retrolambdaConfig 'net.orfjackal.retrolambda:retrolambda:2.3.0'
    provided "javax.annotation:jsr250-api:$depJavaxAnnotationVersion"
    compile "javax.inject:javax.inject:$depJavaxInjectVersion"
    compile "com.squareup.okhttp:okhttp:$depOkHttpVersion"
    compile "com.google.code.gson:gson:$depGsonVersion"

    compile "com.android.support:support-annotations:$depAndroidAnnotationsVersion"

    compile "com.squareup.dagger:dagger:$depDagger"
    apt "com.squareup.dagger:dagger-compiler:$depDagger"

    compile "com.squareup.okhttp3:okhttp:$depOkhttp"
    compile "com.squareup.okhttp3:logging-interceptor:$depOkhttp"

    compile "com.squareup.retrofit2:retrofit:$depRetrofit"
    compile "com.squareup.retrofit2:converter-gson:$depRetrofit"
    compile "com.squareup.retrofit2:adapter-rxjava:$depRetrofit"
    debugCompile "com.squareup.retrofit2:retrofit-mock:$depRetrofit"
//    internalDebugCompile "com.squareup.retrofit2:retrofit-mock:$depRetrofit"

    compile "com.jakewharton.timber:timber:$depTimber"

    compile "com.jakewharton.threetenabp:threetenabp:$depThreeten"
    compile "com.jakewharton.byteunits:byteunits:$depByteUnits"

    compile "javax.inject:javax.inject:$depJavaxInjectVersion"


    testCompile  "junit:junit:$depJUnitVersion"
    testCompile  "org.mockito:mockito-core:$depMockitoVersion"

    compile "com.f2prateek.rx.preferences:rx-preferences:$depRxPreferences"

    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    // TODO https://code.google.com/p/android-test-kit/issues/detail?id=157
    //androidTestCompile 'com.android.support.test.espresso:espresso-contrib:2.2'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile 'com.squareup.spoon:spoon-client:1.2.0'

    testCompile 'junit:junit:4.12'
    testCompile 'com.google.truth:truth:0.27'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.6@aar') {
        transitive = true;
    }

}

def installAll = tasks.create('installAll')
installAll.description = 'Install all applications.'
android.applicationVariants.all { variant ->
    installAll.dependsOn(variant.install)
    // Ensure we end up in the same group as the other install tasks.
    installAll.group = variant.install.group
}

// The default 'assemble' task only applies to normal variants. Add test variants as well.
android.testVariants.all { variant ->
    tasks.getByName('assemble').dependsOn variant.assemble
}
//apply plugin: 'com.google.gms.google-services'